---------------------------------------------------------------------------------------------------
TODO:
Web server
  - Remove capitalization from usernames [should be all lowercase in table always]
  - Plan tables
  - Plan game server authorisation
  - Set up tables
     - Last online time table

  - PHP scripts, using GET at first
    - Authorised save progress script [set inv, set xp, set base stats]
    - PlayerIsOnline script for multiple servers

  - Apparently mysqli_real_escape_string isn't sufficient to prevent SQL injection attacks. There's a fairly easy alternative, check it out.
  - Multiple game server infastructure [plan it first]
  - Online table

Game Client
  - Loading UI
  - Disconnecting returns you to the login screen
  - Save login details
  - Server select screen

Game Server
  - Improve the password situation
  - Send web request and check token ok
  - Send TOKEN INVALID if incorrect
  - Send web requests to save an account's progress

WebReq
  - Some kind of timeout thing, or call the callback with an empty string if it fails, etc.
    Maybe needs a boolean in the function call to say it failed, or a special string [use a pointer and pass nullptr?]


OVERVIEW:
  1) Loading state leads to the login state
  2) Login state gets the username and password, which are sent off in a token request. Token is stored in ConnectionManager
  3) Login state leads to the server select state
  4) Once a server is selected, we connect to the server and go to GameState [unless it fails]

Okay,
Y
400 XP
Stats 150,130,4,4,3,2,3,6
Items 0,6,3,7,8,2,3,9,10,6,3

Y400 150,130,4,4,3,2,3,6 -1,-1,-1,-1,50,39,22,27,11,15,6,16,3,1,-1,-1,-1,-1,-1,-1

Set XP
	Every time a player is awarded new XP : DONE NEEDS TESTING
Set Stats
	Every time a player sends P_UPDATE_STAT
Set Inventory
	Any updateInventory thing
	Any pick up item thing [covered by update inventory?]


XP table [ID, XP]
Stat table [ID, Stat string]
Item table [ID, Item string]

Internal: get items, get stats, get xp


Authorisation:
	Send off a password.
	The password changes every minute.
	If access is denied, we retry.

SHA56 hash

---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------
Notes

Lots of data is stored on players, mainly 1:1

What is stored?
1) Inventory and equips, as a list of 16 numbers. Stored sillily in a string. "0,-1,1,5,2,5,7,3,1,0,9,5" and -1 for empty
2) Base stats. Stored as a silly old string again. "150,100,10,10,10"
3) XP. Stored as a BIGINT or whatever.
4) A username and password [3 columns: ID, username, password]

The server has INTERNAL functions for 
getXP, getBaseStats, getInventory

The server has an EXTERNAL function [with no privacy!] for
getData(ID) ->
"0,-1,1,5,2,-1,-1,-1,-1\n150,100,10,10,10\n532,352"
---------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------
Issues
	How will we do server confirmation?
	How will we prevent a player logging in twice,
		On the same server? : they shouldn't get this far. if they do, quietly fail with a warning print
		On two different servers?
	Apparently we should be using POST instead of GET.
		This is because of shared hosting privacy issues, and the fact that all GET urls are stored in the logs
		[Confirmed; I can read all the passwords of people on ZMessage. Whoops!]
		[Gotta 1) Work out what POST is 2) Check that I can't read it on HTTPS POST]

Planned solutions:
Server confirmation:
	- Note that HTTPS POST cannot be read by 3rd parties, so they wouldn't see the web request
	- Regardless, the password should change regularly and depend on the data.

	1) Both servers store the secret password
	2) The input is hashed with the secret password to give a special thing.

Logging in twice:
	- What should happen?
	- New logger inner gets rejected.
	Logging in:
		1) We request our token. The server checks the onlineTable and refuses to give us a token.

	Logging in first time:
		1) We request our token and we're added to the onlineTable.

	Loggin out:
		1.1) Choosing to log out / disconnecting etc.
			Server detects it and sends an authenticated player_logged_out.php thing
		1.2) A server crashes. This is the problematic part...
			????????????????????????????????????????????????????????????????????????
			- Server sends a web request proving it still exists every 5 min.
				If nothing is received for 6 min, we destroy everyone connected to that server
			- Clients need to send new tokens after 1h. If they are logged in over an hour ago, they are assumed to be logged out.

---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------
TABLES
Made:
	Tokens: playerID (INT), token (VARCHAR 100), timestamp (BIGINT)
	Users: playerID (INT), username (VARCHAR 20), password (VARCHAR 100)
	XPTable: playerID (INT), xp (BIGINT)
	Stats: playerID (INT), stats (VARCHAR 64)
	Inventory: playerID (INT), inventory (VARCHAR 128)

Not made:

Not made, advanced, not sure:
	OnlineTable: ID, Login ID, Server ID
	Servers: Server ID, Name, IP address
---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------
How will multiple servers work?

	Following the LoginState, the player will be taken to the ServerSelectState
	This will request the servers from the web server.
	And we will then set the IP that we wish to connect to, and send the token over.

	Will look something like this: My laptop lol 81.102.0.202
---------------------------------------------------------------------------------------------------






---------------------------------------------------------------------------------------------------
Logging in:
	1) Client types in username and password (or they are loaded from storage)
	2) The client sends an HTTPS request to xmpp.bobinthehob.com with its username and password
	3) A loading thing is shown that goes round and round or whatever, while another thread deals with the web request.
	4) Eventually, it receives the player's ID + a login token. This is a randomly generated string, stored in a temporary table: ID -> TOKEN
		4.2) Or, it receives NO + REASON NUMBER: 0 meaning wrong login, *1 meaning player already logged in*
	5) We then connect to the game server.
		And we immediately send P_CLIENT_HELLO
		ID, TOKEN
	6) The server receives the hello and adds them to the pending list, with their supposed ID.
		We send a request to the server, encrypted:
		isTokenCorrect(ID, TOKEN)
	7) The web server replies yes or no.
		If the answer is yes, it also attaches the data from getData(ID) to the output
	8.1) If the answer is yes, we create the Player object and process the data, setting its XP, inventory, and base stats.
		Send off P_SERVER_HELLO and the game begins.
	8.2) If the answer is no, we reply with a P_LOGIN_FAILED.
---------------------------------------------------------------------------------------------------







---------------------------------------------------------------------------------------------------
Logging out:
	1) Player disconnects
	2) PlayerLoggedOut(ID) called to remove from login table.
	ISSUE: If the server crashes, everyone stays logged in, and cannot log in again.
	SOLUTION: Every 5min
---------------------------------------------------------------------------------------------------






---------------------------------------------------------------------------------------------------

Okay ummmmmmmmmmmm
We send setInventory(ID, data string)

 1) We need a check variable
 2) The check variable needs to depend on more than just the ID and data string, or one valid input is always valid.
    So the required check variable changes depending on some shit.

The check variable will be a HASH of a string.
The string will be a secret password AND
	a string representing the number of web requests involving this ID.
---------------------------------------------------------------------------------------------------






---------------------------------------------------------------------------------------------------
Saving progress:
	1) Every time something changes, send an update
		- Every time updateInventory = true, we need to send a setInventory(ID, data string) 
		- 
---------------------------------------------------------------------------------------------------


I leave everything to the family